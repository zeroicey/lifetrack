// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_groups.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskGroup = `-- name: CreateTaskGroup :one
INSERT INTO task_groups (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at, updated_at
`

type CreateTaskGroupParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateTaskGroup(ctx context.Context, arg CreateTaskGroupParams) (TaskGroup, error) {
	row := q.db.QueryRow(ctx, createTaskGroup, arg.Name, arg.Description)
	var i TaskGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskGroup = `-- name: DeleteTaskGroup :exec
DELETE FROM task_groups
WHERE id = $1
`

func (q *Queries) DeleteTaskGroup(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTaskGroup, id)
	return err
}

const getAllTaskGroups = `-- name: GetAllTaskGroups :many
SELECT id, name, description, created_at, updated_at FROM task_groups ORDER BY name ASC
`

func (q *Queries) GetAllTaskGroups(ctx context.Context) ([]TaskGroup, error) {
	rows, err := q.db.Query(ctx, getAllTaskGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskGroup
	for rows.Next() {
		var i TaskGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskGroupById = `-- name: GetTaskGroupById :one
SELECT id, name, description, created_at, updated_at FROM task_groups WHERE id = $1
`

func (q *Queries) GetTaskGroupById(ctx context.Context, id int64) (TaskGroup, error) {
	row := q.db.QueryRow(ctx, getTaskGroupById, id)
	var i TaskGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByGroupId = `-- name: GetTasksByGroupId :many
SELECT id, group_id, pos, name, description, status, due_date, created_at, updated_at FROM tasks WHERE group_id = $1 ORDER BY pos
`

func (q *Queries) GetTasksByGroupId(ctx context.Context, groupID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Pos,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskGroup = `-- name: UpdateTaskGroup :one
UPDATE task_groups
SET
    name = $1,
    description = $2
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at
`

type UpdateTaskGroupParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateTaskGroup(ctx context.Context, arg UpdateTaskGroupParams) (TaskGroup, error) {
	row := q.db.QueryRow(ctx, updateTaskGroup, arg.Name, arg.Description, arg.ID)
	var i TaskGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
