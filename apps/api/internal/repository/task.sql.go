// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (group_id, pos, content, description, deadline)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, group_id, pos, content, description, status, deadline, created_at, updated_at
`

type CreateTaskParams struct {
	GroupID     int64              `json:"group_id"`
	Pos         string             `json:"pos"`
	Content     string             `json:"content"`
	Description pgtype.Text        `json:"description"`
	Deadline    pgtype.Timestamptz `json:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.GroupID,
		arg.Pos,
		arg.Content,
		arg.Description,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Pos,
		&i.Content,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskById = `-- name: DeleteTaskById :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTaskById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTaskById, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, group_id, pos, content, description, status, deadline, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Pos,
		&i.Content,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByGroupId = `-- name: GetTasksByGroupId :many
SELECT id, group_id, pos, content, description, status, deadline, created_at, updated_at FROM tasks WHERE group_id = $1 ORDER BY pos
`

func (q *Queries) GetTasksByGroupId(ctx context.Context, groupID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Pos,
			&i.Content,
			&i.Description,
			&i.Status,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const taskExists = `-- name: TaskExists :one
SELECT EXISTS(
    SELECT 1 FROM tasks WHERE id = $1
) AS exists
`

func (q *Queries) TaskExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, taskExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateTaskById = `-- name: UpdateTaskById :one
UPDATE tasks
SET
    pos = $2,
    content = $3,
    description = $4,
    deadline = $5
WHERE
    id = $1
RETURNING id, group_id, pos, content, description, status, deadline, created_at, updated_at
`

type UpdateTaskByIdParams struct {
	ID          int64              `json:"id"`
	Pos         string             `json:"pos"`
	Content     string             `json:"content"`
	Description pgtype.Text        `json:"description"`
	Deadline    pgtype.Timestamptz `json:"deadline"`
}

func (q *Queries) UpdateTaskById(ctx context.Context, arg UpdateTaskByIdParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskById,
		arg.ID,
		arg.Pos,
		arg.Content,
		arg.Description,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Pos,
		&i.Content,
		&i.Description,
		&i.Status,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
