// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT COUNT(*) > 0 as exists FROM users
`

func (q *Queries) CheckUserExists(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, password_hash, birthday, avatar_base64, bio)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, name, password_hash, birthday, avatar_base64, bio, created_at, updated_at
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	Name         string      `json:"name"`
	PasswordHash string      `json:"password_hash"`
	Birthday     pgtype.Date `json:"birthday"`
	AvatarBase64 string      `json:"avatar_base64"`
	Bio          string      `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
		arg.Birthday,
		arg.AvatarBase64,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Birthday,
		&i.AvatarBase64,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, password_hash, birthday, avatar_base64, bio, created_at, updated_at FROM users LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Birthday,
		&i.AvatarBase64,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password_hash, birthday, avatar_base64, bio, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Birthday,
		&i.AvatarBase64,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT COUNT(*) as count FROM users
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $2,
    name = $3,
    birthday = $4,
    avatar_base64 = $5,
    bio = $6
WHERE
    id = $1
RETURNING id, email, name, password_hash, birthday, avatar_base64, bio, created_at, updated_at
`

type UpdateUserParams struct {
	ID           int64       `json:"id"`
	Email        string      `json:"email"`
	Name         string      `json:"name"`
	Birthday     pgtype.Date `json:"birthday"`
	AvatarBase64 string      `json:"avatar_base64"`
	Bio          string      `json:"bio"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Birthday,
		arg.AvatarBase64,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Birthday,
		&i.AvatarBase64,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
