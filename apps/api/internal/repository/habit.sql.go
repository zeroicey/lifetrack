// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habit.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at, updated_at
`

type CreateHabitParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRow(ctx, createHabit, arg.Name, arg.Description)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHabitById = `-- name: DeleteHabitById :exec
DELETE FROM habits
WHERE id = $1
`

func (q *Queries) DeleteHabitById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHabitById, id)
	return err
}

const getAllHabits = `-- name: GetAllHabits :many
SELECT 
    h.id,
    h.name,
    h.description,
    h.created_at,
    h.updated_at,
    COUNT(hl.id) as total_logs,
    MAX(hl.happened_at)::timestamptz as last_log_time
FROM habits h
LEFT JOIN habit_logs hl ON h.id = hl.habit_id
GROUP BY h.id, h.name, h.description, h.created_at, h.updated_at
ORDER BY h.updated_at DESC
`

type GetAllHabitsRow struct {
	ID          int64              `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	TotalLogs   int64              `json:"total_logs"`
	LastLogTime pgtype.Timestamptz `json:"last_log_time"`
}

func (q *Queries) GetAllHabits(ctx context.Context) ([]GetAllHabitsRow, error) {
	rows, err := q.db.Query(ctx, getAllHabits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHabitsRow
	for rows.Next() {
		var i GetAllHabitsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalLogs,
			&i.LastLogTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitById = `-- name: GetHabitById :one
SELECT 
    h.id,
    h.name,
    h.description,
    h.created_at,
    h.updated_at,
    COUNT(hl.id) as total_logs,
    MAX(hl.happened_at)::timestamptz as last_log_time
FROM habits h
LEFT JOIN habit_logs hl ON h.id = hl.habit_id
WHERE h.id = $1
GROUP BY h.id, h.name, h.description, h.created_at, h.updated_at
`

type GetHabitByIdRow struct {
	ID          int64              `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	TotalLogs   int64              `json:"total_logs"`
	LastLogTime pgtype.Timestamptz `json:"last_log_time"`
}

func (q *Queries) GetHabitById(ctx context.Context, id int64) (GetHabitByIdRow, error) {
	row := q.db.QueryRow(ctx, getHabitById, id)
	var i GetHabitByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalLogs,
		&i.LastLogTime,
	)
	return i, err
}

const getHabitByName = `-- name: GetHabitByName :one
SELECT id, name, description, created_at, updated_at FROM habits WHERE name = $1
`

func (q *Queries) GetHabitByName(ctx context.Context, name string) (Habit, error) {
	row := q.db.QueryRow(ctx, getHabitByName, name)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const habitExists = `-- name: HabitExists :one
SELECT EXISTS(
    SELECT 1 FROM habits WHERE id = $1
) AS exists
`

func (q *Queries) HabitExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, habitExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateHabitById = `-- name: UpdateHabitById :one
UPDATE habits
SET
    name = $1,
    description = $2
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at
`

type UpdateHabitByIdParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateHabitById(ctx context.Context, arg UpdateHabitByIdParams) (Habit, error) {
	row := q.db.QueryRow(ctx, updateHabitById, arg.Name, arg.Description, arg.ID)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
