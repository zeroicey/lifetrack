// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: storage.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO attachments (
    object_key,
    original_name,
    mime_type,
    md5,
    file_size,
    status
) VALUES (
    $1, $2, $3, $4, $5, 'uploading'
) RETURNING id, object_key, original_name, mime_type, md5, file_size, status, created_at, updated_at
`

type CreateAttachmentParams struct {
	ObjectKey    string `json:"object_key"`
	OriginalName string `json:"original_name"`
	MimeType     string `json:"mime_type"`
	Md5          string `json:"md5"`
	FileSize     int64  `json:"file_size"`
}

// 创建一个新的附件记录，并返回新创建的完整记录
func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRow(ctx, createAttachment,
		arg.ObjectKey,
		arg.OriginalName,
		arg.MimeType,
		arg.Md5,
		arg.FileSize,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.ObjectKey,
		&i.OriginalName,
		&i.MimeType,
		&i.Md5,
		&i.FileSize,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCompletedAttachmentByMD5 = `-- name: FindCompletedAttachmentByMD5 :one
SELECT id, object_key, original_name, mime_type, md5, file_size, status, created_at, updated_at FROM attachments
WHERE md5 = $1 AND status = 'completed'
LIMIT 1
`

func (q *Queries) FindCompletedAttachmentByMD5(ctx context.Context, md5 string) (Attachment, error) {
	row := q.db.QueryRow(ctx, findCompletedAttachmentByMD5, md5)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.ObjectKey,
		&i.OriginalName,
		&i.MimeType,
		&i.Md5,
		&i.FileSize,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompletedAttachmentObjectKey = `-- name: GetCompletedAttachmentObjectKey :one
SELECT object_key FROM attachments
WHERE id = $1 AND status = 'completed'
`

func (q *Queries) GetCompletedAttachmentObjectKey(ctx context.Context, id pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getCompletedAttachmentObjectKey, id)
	var object_key string
	err := row.Scan(&object_key)
	return object_key, err
}

const updateAttachmentStatus = `-- name: UpdateAttachmentStatus :exec
UPDATE attachments
SET status = $1
WHERE id = $2
`

type UpdateAttachmentStatusParams struct {
	Status string      `json:"status"`
	ID     pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateAttachmentStatus(ctx context.Context, arg UpdateAttachmentStatusParams) error {
	_, err := q.db.Exec(ctx, updateAttachmentStatus, arg.Status, arg.ID)
	return err
}
