// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habitlog.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHabitLog = `-- name: CreateHabitLog :one
INSERT INTO habit_logs (habit_id, happened_at)
VALUES ($1, $2)
RETURNING id, habit_id, happened_at
`

type CreateHabitLogParams struct {
	HabitID    int64              `json:"habit_id"`
	HappenedAt pgtype.Timestamptz `json:"happened_at"`
}

func (q *Queries) CreateHabitLog(ctx context.Context, arg CreateHabitLogParams) (HabitLog, error) {
	row := q.db.QueryRow(ctx, createHabitLog, arg.HabitID, arg.HappenedAt)
	var i HabitLog
	err := row.Scan(&i.ID, &i.HabitID, &i.HappenedAt)
	return i, err
}

const createHabitLogNow = `-- name: CreateHabitLogNow :one
INSERT INTO habit_logs (habit_id)
VALUES ($1)
RETURNING id, habit_id, happened_at
`

func (q *Queries) CreateHabitLogNow(ctx context.Context, habitID int64) (HabitLog, error) {
	row := q.db.QueryRow(ctx, createHabitLogNow, habitID)
	var i HabitLog
	err := row.Scan(&i.ID, &i.HabitID, &i.HappenedAt)
	return i, err
}

const deleteHabitLogById = `-- name: DeleteHabitLogById :exec
DELETE FROM habit_logs
WHERE id = $1
`

func (q *Queries) DeleteHabitLogById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHabitLogById, id)
	return err
}

const deleteHabitLogsByHabitId = `-- name: DeleteHabitLogsByHabitId :exec
DELETE FROM habit_logs
WHERE habit_id = $1
`

func (q *Queries) DeleteHabitLogsByHabitId(ctx context.Context, habitID int64) error {
	_, err := q.db.Exec(ctx, deleteHabitLogsByHabitId, habitID)
	return err
}

const getAllHabitLogs = `-- name: GetAllHabitLogs :many
SELECT id, habit_id, happened_at FROM habit_logs ORDER BY happened_at DESC
`

func (q *Queries) GetAllHabitLogs(ctx context.Context) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getAllHabitLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogById = `-- name: GetHabitLogById :one
SELECT id, habit_id, happened_at FROM habit_logs WHERE id = $1
`

func (q *Queries) GetHabitLogById(ctx context.Context, id int64) (HabitLog, error) {
	row := q.db.QueryRow(ctx, getHabitLogById, id)
	var i HabitLog
	err := row.Scan(&i.ID, &i.HabitID, &i.HappenedAt)
	return i, err
}

const getHabitLogsByDate = `-- name: GetHabitLogsByDate :many
SELECT id, habit_id, happened_at FROM habit_logs
WHERE DATE(happened_at) = $1
ORDER BY happened_at DESC
`

// 获取指定日期的习惯日志
func (q *Queries) GetHabitLogsByDate(ctx context.Context, happenedAt pgtype.Timestamptz) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getHabitLogsByDate, happenedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsByHabitId = `-- name: GetHabitLogsByHabitId :many
SELECT id, habit_id, happened_at FROM habit_logs
WHERE habit_id = $1
ORDER BY happened_at DESC
`

func (q *Queries) GetHabitLogsByHabitId(ctx context.Context, habitID int64) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getHabitLogsByHabitId, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsByHabitIdAndDate = `-- name: GetHabitLogsByHabitIdAndDate :many
SELECT id, habit_id, happened_at FROM habit_logs
WHERE habit_id = $1 AND DATE(happened_at) = $2
ORDER BY happened_at DESC
`

type GetHabitLogsByHabitIdAndDateParams struct {
	HabitID    int64              `json:"habit_id"`
	HappenedAt pgtype.Timestamptz `json:"happened_at"`
}

// 获取指定习惯在指定日期的日志
func (q *Queries) GetHabitLogsByHabitIdAndDate(ctx context.Context, arg GetHabitLogsByHabitIdAndDateParams) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getHabitLogsByHabitIdAndDate, arg.HabitID, arg.HappenedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsByHabitIdWithLimit = `-- name: GetHabitLogsByHabitIdWithLimit :many
SELECT id, habit_id, happened_at FROM habit_logs
WHERE habit_id = $1
ORDER BY happened_at DESC
LIMIT $2
`

type GetHabitLogsByHabitIdWithLimitParams struct {
	HabitID int64 `json:"habit_id"`
	Limit   int32 `json:"limit"`
}

func (q *Queries) GetHabitLogsByHabitIdWithLimit(ctx context.Context, arg GetHabitLogsByHabitIdWithLimitParams) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getHabitLogsByHabitIdWithLimit, arg.HabitID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsCountByHabitId = `-- name: GetHabitLogsCountByHabitId :one
SELECT COUNT(*) as count FROM habit_logs
WHERE habit_id = $1
`

func (q *Queries) GetHabitLogsCountByHabitId(ctx context.Context, habitID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getHabitLogsCountByHabitId, habitID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getHabitLogsCountByHabitIdInDateRange = `-- name: GetHabitLogsCountByHabitIdInDateRange :one
SELECT COUNT(*) as count FROM habit_logs
WHERE habit_id = $1
  AND happened_at >= $2
  AND happened_at <= $3
`

type GetHabitLogsCountByHabitIdInDateRangeParams struct {
	HabitID      int64              `json:"habit_id"`
	HappenedAt   pgtype.Timestamptz `json:"happened_at"`
	HappenedAt_2 pgtype.Timestamptz `json:"happened_at_2"`
}

func (q *Queries) GetHabitLogsCountByHabitIdInDateRange(ctx context.Context, arg GetHabitLogsCountByHabitIdInDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, getHabitLogsCountByHabitIdInDateRange, arg.HabitID, arg.HappenedAt, arg.HappenedAt_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getHabitWithRecentLogs = `-- name: GetHabitWithRecentLogs :many
SELECT 
    h.id as habit_id,
    h.name as habit_name,
    h.description as habit_description,
    h.created_at as habit_created_at,
    h.updated_at as habit_updated_at,
    hl.id as log_id,
    hl.happened_at as log_happened_at
FROM habits h
LEFT JOIN habit_logs hl ON h.id = hl.habit_id
WHERE h.id = $1
ORDER BY hl.happened_at DESC
LIMIT $2
`

type GetHabitWithRecentLogsParams struct {
	ID    int64 `json:"id"`
	Limit int32 `json:"limit"`
}

type GetHabitWithRecentLogsRow struct {
	HabitID          int64              `json:"habit_id"`
	HabitName        string             `json:"habit_name"`
	HabitDescription string             `json:"habit_description"`
	HabitCreatedAt   pgtype.Timestamptz `json:"habit_created_at"`
	HabitUpdatedAt   pgtype.Timestamptz `json:"habit_updated_at"`
	LogID            pgtype.Int8        `json:"log_id"`
	LogHappenedAt    pgtype.Timestamptz `json:"log_happened_at"`
}

// 获取习惯及其最近的日志记录
func (q *Queries) GetHabitWithRecentLogs(ctx context.Context, arg GetHabitWithRecentLogsParams) ([]GetHabitWithRecentLogsRow, error) {
	rows, err := q.db.Query(ctx, getHabitWithRecentLogs, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHabitWithRecentLogsRow
	for rows.Next() {
		var i GetHabitWithRecentLogsRow
		if err := rows.Scan(
			&i.HabitID,
			&i.HabitName,
			&i.HabitDescription,
			&i.HabitCreatedAt,
			&i.HabitUpdatedAt,
			&i.LogID,
			&i.LogHappenedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodayHabitLogs = `-- name: GetTodayHabitLogs :many
SELECT id, habit_id, happened_at FROM habit_logs
WHERE DATE(happened_at) = CURRENT_DATE
ORDER BY happened_at DESC
`

// 获取今天的习惯日志
func (q *Queries) GetTodayHabitLogs(ctx context.Context) ([]HabitLog, error) {
	rows, err := q.db.Query(ctx, getTodayHabitLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitLog
	for rows.Next() {
		var i HabitLog
		if err := rows.Scan(&i.ID, &i.HabitID, &i.HappenedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const habitLogExists = `-- name: HabitLogExists :one
SELECT EXISTS(
    SELECT 1 FROM habit_logs WHERE id = $1
) AS exists
`

func (q *Queries) HabitLogExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, habitLogExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateHabitLogById = `-- name: UpdateHabitLogById :one
UPDATE habit_logs
SET happened_at = $2
WHERE id = $1
RETURNING id, habit_id, happened_at
`

type UpdateHabitLogByIdParams struct {
	ID         int64              `json:"id"`
	HappenedAt pgtype.Timestamptz `json:"happened_at"`
}

func (q *Queries) UpdateHabitLogById(ctx context.Context, arg UpdateHabitLogByIdParams) (HabitLog, error) {
	row := q.db.QueryRow(ctx, updateHabitLogById, arg.ID, arg.HappenedAt)
	var i HabitLog
	err := row.Scan(&i.ID, &i.HabitID, &i.HappenedAt)
	return i, err
}
