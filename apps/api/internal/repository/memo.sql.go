// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: memo.sql

package repository

import (
	"context"
)

const createMemo = `-- name: CreateMemo :one
INSERT INTO memos (
    content, attachments
) VALUES (
    $1, $2
)
RETURNING id, content, attachments, created_at, updated_at
`

type CreateMemoParams struct {
	Content     string
	Attachments []byte
}

func (q *Queries) CreateMemo(ctx context.Context, arg CreateMemoParams) (Memo, error) {
	row := q.db.QueryRow(ctx, createMemo, arg.Content, arg.Attachments)
	var i Memo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Attachments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMemoByID = `-- name: DeleteMemoByID :exec
DELETE FROM memos
WHERE id = $1
`

func (q *Queries) DeleteMemoByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMemoByID, id)
	return err
}

const getMemoByID = `-- name: GetMemoByID :one
SELECT id, content, attachments, created_at, updated_at FROM memos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMemoByID(ctx context.Context, id int64) (Memo, error) {
	row := q.db.QueryRow(ctx, getMemoByID, id)
	var i Memo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Attachments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMemosWithPagination = `-- name: ListMemosWithPagination :many
SELECT id, content, attachments, created_at, updated_at FROM memos
ORDER BY created_at DESC
`

func (q *Queries) ListMemosWithPagination(ctx context.Context) ([]Memo, error) {
	rows, err := q.db.Query(ctx, listMemosWithPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memo
	for rows.Next() {
		var i Memo
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Attachments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
