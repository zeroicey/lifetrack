// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: moment.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMoment = `-- name: CreateMoment :one
INSERT INTO moments (
    content, attachments
) VALUES (
    $1, $2
)
RETURNING id, content, attachments, created_at, updated_at
`

type CreateMomentParams struct {
	Content     string `json:"content"`
	Attachments []byte `json:"attachments"`
}

func (q *Queries) CreateMoment(ctx context.Context, arg CreateMomentParams) (Moment, error) {
	row := q.db.QueryRow(ctx, createMoment, arg.Content, arg.Attachments)
	var i Moment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Attachments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMomentByID = `-- name: DeleteMomentByID :exec
DELETE FROM moments
WHERE id = $1
`

func (q *Queries) DeleteMomentByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMomentByID, id)
	return err
}

const getMomentByID = `-- name: GetMomentByID :one
SELECT id, content, attachments, created_at, updated_at FROM moments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMomentByID(ctx context.Context, id int64) (Moment, error) {
	row := q.db.QueryRow(ctx, getMomentByID, id)
	var i Moment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Attachments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMomentsPaginated = `-- name: GetMomentsPaginated :many
SELECT id, content, attachments, created_at, updated_at FROM moments
WHERE ($1::timestamp IS NULL OR created_at < $1::timestamp)
ORDER BY created_at DESC
LIMIT $2
`

type GetMomentsPaginatedParams struct {
	Column1 pgtype.Timestamp `json:"column_1"`
	Limit   int32            `json:"limit"`
}

func (q *Queries) GetMomentsPaginated(ctx context.Context, arg GetMomentsPaginatedParams) ([]Moment, error) {
	rows, err := q.db.Query(ctx, getMomentsPaginated, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Moment
	for rows.Next() {
		var i Moment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Attachments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const momentExists = `-- name: MomentExists :one
SELECT EXISTS(
    SELECT 1 FROM moments WHERE id = $1
) AS exists
`

func (q *Queries) MomentExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, momentExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
